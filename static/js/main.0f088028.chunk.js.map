{"version":3,"sources":["common/constants.js","components/youtube_url_converter/index.js","screens/home_page/index.js","screens/rgb_to_hex/events.js","screens/rgb_to_hex/index.js","screens/render_markdown/index.js","components/github_svg.js","components/header/index.js","service_worker.js","index.js","router/index.js"],"names":["AppRoute","state","displayCopyButton","message","youtubeEmbeddedUrl","youtubeWebUrl","onKeyUpEmbeddedToWebUrl","result","RegExp","exec","length","videoId","newUrl","setState","copyToClip","navigator","clipboard","writeText","this","htmlFor","type","placeholder","id","onKeyUp","value","onChange","e","target","size","onClick","className","React","Component","to","rgbToHex","rgb","hexValue","document","getElementById","trim","replace","setHexa","rgbaSplit","split","indexOf","r","g","b","a","toHexa","alphaValue","alphaInFloat","parseFloat","undefined","isNaN","Math","round","convertToHex","toAlpha","deciVal","deciInINT","parseInt","deci","inHex","toString","toUpperCase","hexStr","innerHTML","setAttribute","hexToRGB","hexa","rgbValue","setRGB","substr","toDeci","hexVal","rgbStr","RgbToHex","bind","RenderMarkdown","dropContainer","querySelector","ondragover","ondragenter","evt","preventDefault","ondrop","reader","FileReader","onload","file","body","Showdown","Converter","makeHtml","console","log","readAsText","dataTransfer","files","height","fill","viewBox","version","width","aria-hidden","fillRule","d","href","title","Boolean","window","location","hostname","match","ReactDOM","render","exact","path","from","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0f088028.chunk.js","sourcesContent":["export const AppRoute = {\r\n  HomePage: '/',\r\n  RgbToHex: '/rgb_to_hex',\r\n  RenderMarkdown: '/render_markdown',\r\n};","import React from 'react';\r\n\r\nexport default class extends React.Component {\r\n  state = {\r\n    displayCopyButton: false,\r\n    message: '',\r\n    youtubeEmbeddedUrl: '',\r\n    youtubeWebUrl: '',\r\n  };\r\n\r\n  // constructor(props) {\r\n  //   super(props);\r\n  //   // this.inputCopyToClip = React.createRef();\r\n  // }\r\n\r\n  onKeyUpEmbeddedToWebUrl = () => {\r\n    const { youtubeEmbeddedUrl } = this.state;\r\n\r\n    // owner of regular expression -> https://stackoverflow.com/a/9836367/8075004\r\n    const result = new RegExp(/^.*(youtu.be\\/|v\\/|u\\/\\w\\/|embed\\/|watch\\?v=|&v=)([^#&?]{0,11}).*/g).exec(youtubeEmbeddedUrl);\r\n\r\n    if (result && result.length > 2) {\r\n      const videoId = result[2];\r\n      const newUrl = `https://www.youtube.com/watch?v=${videoId}`;\r\n      this.setState({ message: newUrl, youtubeWebUrl: newUrl, displayCopyButton: true });\r\n      return;\r\n    }\r\n\r\n    this.setState({ message: 'Invalid youtube url', displayCopyButton: false });\r\n\r\n    // OR\r\n    // try {\r\n    //   const url = new URL(inputElement.value);\r\n    //   let videoId;\r\n\r\n    //   if (url.search) {\r\n    //     const urlSearchParams = new URLSearchParams(url.search);\r\n    //     videoId = urlSearchParams.get('v');\r\n    //   } else {\r\n    //     videoId = url.pathname.replace('/', '');\r\n    //   }\r\n\r\n    //   resultElement.innerHTML = `https://www.youtube.com/watch?v=${videoId}`;\r\n    // } catch {\r\n    //   resultElement.innerHTML = 'Invalid url';\r\n    // }\r\n  }\r\n\r\n  copyToClip = () => {\r\n    // https://stackoverflow.com/a/52033479/8075004\r\n    navigator.clipboard.writeText(this.state.youtubeWebUrl);\r\n\r\n    // owner of solution: https://www.w3schools.com/howto/howto_js_copy_clipboard.asp\r\n    // const input = this.inputCopyToClip.current;\r\n    // input.value = this.state.youtubeWebUrl;\r\n    // input.select();\r\n    // input.setSelectionRange(0, 99999); /*For mobile devices*/\r\n    // window.document.execCommand('copy');\r\n  }\r\n\r\n  render() {\r\n    const { displayCopyButton, message, youtubeEmbeddedUrl } = this.state;\r\n\r\n    return <div>\r\n      <label htmlFor=\"youtube_embedded_url\">Convert shared/embedded youtube-url to web-url:</label>\r\n      <br />\r\n      <input\r\n        type='text'\r\n        placeholder='https://youtu.be/eg_link'\r\n        id='youtube_embedded_url'\r\n        onKeyUp={this.onKeyUpEmbeddedToWebUrl}\r\n        value={youtubeEmbeddedUrl}\r\n        onChange={e => this.setState({ youtubeEmbeddedUrl: e.target.value })}\r\n        size={50}\r\n      />\r\n      <br />\r\n      <span>{message}</span>\r\n      <br />\r\n\r\n      <button onClick={this.copyToClip} className={displayCopyButton ? '' : 'invisible'}>Copy</button>\r\n\r\n      {/* <input hidden className='invisible' ref={this.inputCopyToClip} /> */}\r\n    </div>;\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { Link } from \"react-router-dom\";\r\nimport { AppRoute } from './../../common/constants';\r\nimport YoutubeUrlConverter from './../../components/youtube_url_converter';\r\nimport './app.css';\r\n\r\nexport default () => (\r\n  <div className=\"app app_header dark_background\">\r\n    <ul className='list-unstyled'>\r\n      <li><Link className='app_link' to={AppRoute.RgbToHex}>rgb-hex</Link></li>\r\n      <li><Link className='app_link' to={AppRoute.RenderMarkdown}>render-markdown</Link></li>\r\n      <li><YoutubeUrlConverter /></li>\r\n    </ul>\r\n  </div>\r\n);\r\n","\r\nexport function rgbToHex() {\r\n  let rgb = \"\";\r\n  rgb = document.getElementById(\"rgb\").value.trim();\r\n  rgb = rgb.replace(/\\s+/g, \" \");\r\n  let hexValue = 'invalid RGB value: ' + rgb;\r\n  // if (!rgb.length || rgb.length < 5 || (rgb.match(/ /g) || []).length !== 2) {\r\n  if (!rgb.length || rgb.length < 5) {\r\n    return setHexa(hexValue);\r\n  }\r\n  const rgbaSplit = rgb.split(rgb.indexOf(',') > -1 ? \",\" : \" \");\r\n  const r = rgbaSplit[0];\r\n  const g = rgbaSplit[1];\r\n  const b = rgbaSplit[2];\r\n  const a = rgbaSplit.length > 3 ? rgbaSplit[3] : 1;\r\n  hexValue = \"#\";\r\n  hexValue += toHexa(r);\r\n  hexValue += toHexa(g);\r\n  hexValue += toHexa(b);\r\n  hexValue += toAlpha(a);\r\n  setHexa(hexValue);\r\n}\r\n\r\nexport function toHexa(deciVal = \"\") {\r\n  const deciInINT = parseInt(deciVal, 10);\r\n  if (isNaN(deciInINT)) return \"00\";\r\n  return convertToHex(deciInINT);\r\n}\r\n\r\nexport function toAlpha(alphaValue = \"\") {\r\n  let alphaInFloat = parseFloat(alphaValue, 10);\r\n  if (alphaInFloat === undefined || alphaInFloat === null || isNaN(alphaInFloat) || alphaInFloat > 1 || alphaInFloat < 0) return \"ff\";\r\n  alphaInFloat = Math.round(alphaInFloat * 100) / 100; // for 0.95, two decimal places\r\n  alphaInFloat = Math.round(alphaInFloat * 255);\r\n  return convertToHex(alphaInFloat);\r\n}\r\n\r\nexport function convertToHex(deci) {\r\n  const inHex = deci.toString(16).toUpperCase();\r\n  if (inHex.length === 1) return \"0\" + inHex;\r\n  return inHex;\r\n}\r\n\r\nexport function setHexa(hexStr = \"\") {\r\n  document.getElementById(\"hexSTR\").innerHTML = hexStr;\r\n  document.getElementById(\"rgbBox\").setAttribute(\"style\", \"background-color: \" + hexStr);\r\n}\r\n\r\nexport function hexToRGB() {\r\n  let hexa = \"\";\r\n  hexa = document.getElementById(\"hex\").value.trim();\r\n  hexa = hexa.replace(/ /g, \"\");\r\n  let rgbValue = \"Invalid Hex Value: \" + hexa;\r\n  if (!hexa.length || hexa.length < 6) {\r\n    return setRGB(rgbValue);\r\n  }\r\n  if (hexa.indexOf(\"#\") > -1) {\r\n    hexa = hexa.substr(1);\r\n  }\r\n  hexa = hexa.substr(0, 6);\r\n  const r = hexa.substr(0, 2);\r\n  const g = hexa.substr(2, 2);\r\n  const b = hexa.substr(4, 2);\r\n  hexa = \"rgb(\";\r\n  hexa += toDeci(r) + \", \";\r\n  hexa += toDeci(g) + \", \";\r\n  hexa += toDeci(b) + \")\";\r\n  setRGB(hexa);\r\n}\r\n\r\nexport function toDeci(hexVal = \"0\") {\r\n  return parseInt(hexVal, 16);\r\n}\r\n\r\nexport function setRGB(rgbStr = \"\") {\r\n  document.getElementById(\"rgbSTR\").innerHTML = rgbStr;\r\n  document.getElementById(\"hexBox\").setAttribute(\"style\", \"background-color: \" + rgbStr);\r\n}\r\n\r\n// export function parseInteger(integer) {\r\n//   let parsed = parseInt(integer);\r\n//   return parsed || parsed === 0 ? parsed : 0;\r\n// }\r\n// export function dividedBy(x, y) {\r\n//   let z = x / y;\r\n//   return isNaN(z) ? 0 : z;\r\n// }\r\n","import React from 'react';\r\nimport './style.css';\r\nimport { hexToRGB, rgbToHex } from './events';\r\n\r\nexport default class RgbToHex extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"parent-box\">\r\n          <div id=\"rgbBox\">&nbsp;</div>\r\n          <div className=\"box\">\r\n            <label htmlFor=\"rgb\">\r\n              RGB(&nbsp;\r\n              <input\r\n                type=\"text\"\r\n                id=\"rgb\"\r\n                placeholder=\"255 255 255 | 255, 255, 255\"\r\n                onChange={rgbToHex.bind(this)}\r\n                size={25} />\r\n              &nbsp;)\r\n            </label>\r\n            &nbsp;&nbsp;&nbsp;\r\n        <span id=\"hexSTR\"></span>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"parent-box\">\r\n          <div id=\"hexBox\">&nbsp;</div>\r\n          <div className=\"box\">\r\n            <label htmlFor=\"hex\">#&nbsp;<input type=\"text\" id=\"hex\" placeholder=\"0099ff\" onChange={hexToRGB.bind(this)} /></label>\r\n            &nbsp;&nbsp;&nbsp;\r\n          <span id=\"rgbSTR\"></span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}","import React from 'react';\r\nimport Showdown from 'showdown';\r\nimport './style.css';\r\n\r\nexport default class RenderMarkdown extends React.Component {\r\n  componentDidMount() {\r\n    const dropContainer = document.querySelector('#dropContainer');\r\n    dropContainer.ondragover = dropContainer.ondragenter = (evt) => {\r\n      evt.preventDefault();\r\n    };\r\n\r\n    dropContainer.ondrop = (evt) => {\r\n      evt.preventDefault();\r\n      const reader = new FileReader();\r\n      reader.onload = (file) => {\r\n        // document.querySelector('#htmlDiv').innerHTML = new Showdown.Converter().makeHtml(file.target.result);\r\n        document.body.innerHTML = new Showdown.Converter().makeHtml(file.target.result);\r\n        console.log('document: ', document);\r\n      }\r\n      reader.readAsText(evt.dataTransfer.files[0]);\r\n    };\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"\" id=\"dropContainer\">\r\n          <input type=\"file\" className=\"\" id=\"source\" />\r\n          <h4>Drop MD file here</h4>\r\n        </div>\r\n        <div id=\"htmlDiv\"></div>\r\n      </div>\r\n    );\r\n  }\r\n}","import React from 'react';\r\n\r\nexport default () => <svg height=\"30\" className=\"octicon octicon-mark-github\" fill=\"#24292E\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"32\" aria-hidden=\"true\"><path fillRule=\"evenodd\" d=\"M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.013 8.013 0 0 0 16 8c0-4.42-3.58-8-8-8z\"></path></svg>","import React from 'react';\r\nimport GitHubSvg from '../github_svg';\r\nimport { Link } from 'react-router-dom';\r\nimport { AppRoute } from './../../common/constants';\r\n\r\nexport default () => (\r\n  <nav className='navbar'>\r\n    <a href=\"https://github.com/abdulmoizhussain\" title=\"Abdul Moiz's Github Repositories\">\r\n      <GitHubSvg />\r\n    </a>\r\n\r\n    <Link to={AppRoute.HomePage} title=\"Home Page\" className='ml-auto' >\r\n      <b>Home</b>\r\n    </Link>\r\n  </nav>\r\n);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport Router from './router';\r\nimport * as serviceWorker from './service_worker';\r\n\r\nReactDOM.render(<Router />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import React from \"react\";\r\nimport { BrowserRouter as Router, Switch, Route, Redirect } from \"react-router-dom\";\r\nimport { AppRoute } from './../common/constants';\r\nimport HomePage from './../screens/home_page';\r\nimport RgbToHex from './../screens/rgb_to_hex';\r\nimport RenderMarkdown from './../screens/render_markdown';\r\nimport Header from '../components/header';\r\n\r\nexport default function () {\r\n  return (\r\n    <Router>\r\n      <>\r\n        <Header />\r\n        {/* A <Switch> looks through its children <Route>s and */}\r\n        {/* renders the first one that matches the current URL. */}\r\n        <Switch>\r\n          <Route exact path={AppRoute.HomePage}><HomePage /></Route>\r\n          <Route path={AppRoute.RgbToHex}><RgbToHex /></Route>\r\n          <Route path={AppRoute.RenderMarkdown}><RenderMarkdown /></Route>\r\n          <Redirect from='*' to={AppRoute.HomePage} />\r\n        </Switch>\r\n      </>\r\n    </Router>\r\n  );\r\n}"],"sourceRoot":""}